#!/usr/bin/env bash

LIGHTNING_DIRS="/tmp/lightning-simulations/1/lightning-datadirs"

# the functions in this file only works for nodes running in simulation number SIMULATION_NUM
SIMULATION_NUM=1

# These are defined according to the ResourcesAllocator
LIGHTNING_RPC_CODE=1
BITCOIN_RPC_CODE=4

# from the ResourcesAllocator doc:
# Each port is 5 digits: XYZZZ
#     X: simulation number. 1-6
#     Y: service type (see ServiceType). 0-9
#     ZZZ: an id of some node in simulation X. 0-999

lightning_rpc_port() {
    IDX=$1
    PADDED_IDX=$(printf "%03d" $IDX)
    echo "${SIMULATION_NUM}${LIGHTNING_RPC_CODE}${PADDED_IDX}"
}

bitcoin_rpc_port() {
    IDX=$1
    PADDED_IDX=$(printf "%03d" $IDX)
    echo "${SIMULATION_NUM}${BITCOIN_RPC_CODE}${PADDED_IDX}"
}

# alias for lightning-cli (c-lightning)
lcli() {
    IDX=$1
    lightning-cli \
        --conf=$LN/conf/clightning.conf \
        --lightning-dir="$LIGHTNING_DIRS/$IDX" \
        "${@:2}"
}
export -f lcli

# alias for lncli (lnd)
lncli() {
    IDX=$1
    PORT=$(lightning_rpc_port $IDX)
    $LN/bin/lncli \
        --rpcserver localhost:${PORT} \
        --lnddir $LIGHTNING_DIRS/${IDX} \
        --no-macaroons \
        "${@:2}"
}
export -f lncli

# alias for eclair-cli (Eclair)
ecli() {
    IDX=$1
    PORT=$(lightning_rpc_port $IDX)
    eclair-cli -p kek -a localhost:$PORT "${@:2}"
}
export -f ecli

bcli() {
    IDX=$1
    PORT=$(bitcoin_rpc_port $IDX)
    bitcoin-cli -conf=$LN/conf/bitcoin.conf -rpcport=$PORT "${@:2}"
}
export -f bcli

bcli-main() {
    bcli 0 "$@"
}
export -f bcli-main

gettransaction() {
    txid=$1
    RAW_TRANSACTION=$(bcli-main getrawtransaction $txid)
    bcli-main decoderawtransaction $RAW_TRANSACTION
}
export -f gettransaction

getblock() {
    blockheight=$1
    blockhash=$(bcli-main getblockhash $blockheight)
    bcli-main getblock $blockhash
}
export -f getblock

mine() {
    BLOCKS_TO_MINE=$1
    bcli-main generatetoaddress $BLOCKS_TO_MINE $(bcli-main getnewaddress) >/dev/null
}
export -f mine

# print blockchain height and mempool size for each node
stat() {
    MAX_NODE_IDX=$1
    for i in $(seq 0 $MAX_NODE_IDX); do
        if [[ $(bcli $i echo "testo" 2>/dev/null | jq -r ".[0]") == "testo" ]]; then
            printf "bcli $i: height="
            bcli $i -getinfo | jq -j -r ".blocks"
            printf " mempool_size="
            bcli $i getmempoolinfo | jq -j -r ".size"
            printf "; "
            printf "ln $i: height="
            if [[ $(lcli $i getinfo 2>/dev/null | jq -r ".blockheight") -gt 0 ]]; then
                lcli $i getinfo | jq -j -r ".blockheight"
            elif [[ $(lncli $i getinfo 2>/dev/null | jq -r ".block_height") -gt 0 ]]; then
                lncli $i getinfo | jq -j -r ".block_height"
            elif [[ $(eclclili $i getinfo 2>/dev/null | jq -r ".blockHeight") -gt 0 ]]; then
                ecli $i getinfo | jq -j -r ".blockHeight"
            fi
            echo
        fi
    done
}
export -f stat

listpeers() {
    lcli $1 listpeers | less
}
export -f listpeers
